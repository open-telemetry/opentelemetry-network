# Copyright The OpenTelemetry Authors
# SPDX-License-Identifier: Apache-2.0

name: build-and-test
run-name: ${{ github.actor }} is running  GitHub Actions
on:
  push:
    branches:
      - main
  pull_request:
    paths:

permissions:
  contents: read

env:
  BENV_IMAGE: ${{ vars.BENV_IMAGE || 'docker.io/otel/opentelemetry-network-build-tools' }}

# concurrency:
#   group: build-and-test-${{ github.event.pull_request_number || github.ref }}
#   cancel-in-progress: true

jobs:
  clang-format-check:
    runs-on: ubuntu-24.04
    name: clang-format-check

    steps:
    - name: Print github workspace
      run: |
        echo "github.workspace = ${{ github.workspace }}"
        echo "pr.ref = ${{github.event.pull_request.head.ref}}"
        echo "github.ref = ${{ github.ref }}"
        echo "$GITHUB_CONTEXT"

    - name: Check out the codebase
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

    - name: Get current date
      id: date
      run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

    - name: Runs format checker
      run: |
        # disable man page updates for faster apt install
        echo "set man-db/auto-update false" | sudo debconf-communicate || true
        sudo dpkg-reconfigure man-db

        sudo apt update
        sudo apt install -y --no-install-recommends clang-format-19
        cd ${{ github.workspace }}
        ./.github/workflows/scripts/check-clang-format.sh

    outputs:
      date: ${{ steps.date.outputs.date }}

  build-reducer:
    name: build-reducer
    runs-on: ubuntu-24.04
    steps:
    - name: Check out the codebase
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        fetch-depth: 0

    - name: Cache and install ccache
      uses: awalsh128/cache-apt-pkgs-action@latest
      with:
        packages: ccache
        version: 1.0

    - name: Setup ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ccache-build-reducer
        max-size: 1G
        verbose: 2

    - name: build-reducer
      env:
        PASS: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        echo "github.workspace = ${{ github.workspace }}"
        docker pull $BENV_IMAGE
        git submodule update  --init --recursive ext/
        
        # Start local registry for the build process
        docker run -d -p 5000:5000 --name registry docker.io/library/registry:2
        
        # Build reducer with registry access
        # Ensure ccache directory is writable inside container
        mkdir -p "${{ github.workspace }}/.ccache"
        chmod -R 777 "${{ github.workspace }}/.ccache" || true
        
        docker run -t \
        --rm \
        --mount "type=bind,source=${{ github.workspace }}/.ccache,destination=/ccache" \
        --mount "type=bind,source=$(git rev-parse --show-toplevel),destination=/home/user/src,readonly" \
        --env EBPF_NET_SRC_ROOT=/home/user/src \
        --env CCACHE_DIR=/ccache \
        --network host \
        --privileged \
        $BENV_IMAGE \
        ./build.sh reducer-docker-registry
        
        # Export reducer container
        mkdir -p container-exports
        docker pull localhost:5000/reducer
        docker save localhost:5000/reducer > container-exports/reducer.tar
        
        # Clean up registry
        docker stop registry
        docker rm registry

    - name: Upload reducer container
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: reducer-container
        path: container-exports/reducer.tar
        if-no-files-found: error
        retention-days: 1

  build-kernel-collector:
    name: build-kernel-collector
    runs-on: ubuntu-24.04
    steps:
    - name: Check out the codebase
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        fetch-depth: 0

    - name: Cache and install ccache
      uses: awalsh128/cache-apt-pkgs-action@latest
      with:
        packages: ccache
        version: 1.0

    - name: Setup ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ccache-build-kernel-collector
        max-size: 1G
        verbose: 2

    - name: build-kernel-collector
      env:
        PASS: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        echo "github.workspace = ${{ github.workspace }}"
        docker pull $BENV_IMAGE
        git submodule update  --init --recursive ext/
        
        # Start local registry for the build process
        docker run -d -p 5000:5000 --name registry docker.io/library/registry:2
        
        # Build kernel-collector with registry access
        # Ensure ccache directory is writable inside container
        mkdir -p "${{ github.workspace }}/.ccache"
        chmod -R 777 "${{ github.workspace }}/.ccache" || true
        
        docker run -t \
        --rm \
        --mount "type=bind,source=${{ github.workspace }}/.ccache,destination=/ccache" \
        --mount "type=bind,source=$(git rev-parse --show-toplevel),destination=/home/user/src,readonly" \
        --env EBPF_NET_SRC_ROOT=/home/user/src \
        --env CCACHE_DIR=/ccache \
        --network host \
        --privileged \
        $BENV_IMAGE \
        ./build.sh kernel-collector-docker-registry
        
        # Export kernel-collector container
        mkdir -p container-exports
        docker pull localhost:5000/kernel-collector
        docker save localhost:5000/kernel-collector > container-exports/kernel-collector.tar
        
        # Clean up registry
        docker stop registry
        docker rm registry

    - name: Upload kernel collector container
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: kernel-collector-container
        path: container-exports/kernel-collector.tar
        if-no-files-found: error
        retention-days: 1

  build-kernel-collector-test:
    name: build-kernel-collector-test
    runs-on: ubuntu-24.04
    steps:
    - name: Check out the codebase
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        fetch-depth: 0

    - name: Cache and install ccache
      uses: awalsh128/cache-apt-pkgs-action@latest
      with:
        packages: ccache
        version: 1.0

    - name: Setup ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ccache-build-kernel-collector-test
        max-size: 1G
        verbose: 2

    - name: build kernel-collector-test container
      env:
        PASS: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        echo "github.workspace = ${{ github.workspace }}"
        docker pull $BENV_IMAGE
        git submodule update  --init --recursive ext/
        
        # Start local registry for the build process
        docker run -d -p 5000:5000 --name registry docker.io/library/registry:2
        
        # Build kernel-collector-test with registry access
        # Ensure ccache directory is writable inside container
        mkdir -p "${{ github.workspace }}/.ccache"
        chmod -R 777 "${{ github.workspace }}/.ccache" || true
        
        docker run -t \
        --rm \
        --mount "type=bind,source=${{ github.workspace }}/.ccache,destination=/ccache" \
        --mount "type=bind,source=$(git rev-parse --show-toplevel),destination=/home/user/src,readonly" \
        --env EBPF_NET_SRC_ROOT=/home/user/src \
        --env CCACHE_DIR=/ccache \
        --network host \
        --privileged \
        $BENV_IMAGE \
        ./build.sh kernel-collector-test-docker-registry
        
        # Export kernel-collector-test container
        mkdir -p container-exports
        docker pull localhost:5000/kernel-collector-test
        docker save localhost:5000/kernel-collector-test > container-exports/kernel-collector-test.tar
        
        # Clean up registry
        docker stop registry
        docker rm registry

    - name: Upload kernel-collector-test container
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: kernel-collector-test-container
        path: container-exports/kernel-collector-test.tar
        if-no-files-found: error
        retention-days: 1

  build-k8s-relay:
    name: build-k8s-relay
    runs-on: ubuntu-24.04
    steps:
    - name: Check out the codebase
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        fetch-depth: 0

    - name: Cache and install ccache
      uses: awalsh128/cache-apt-pkgs-action@latest
      with:
        packages: ccache
        version: 1.0

    - name: Setup ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ccache-build-k8s-relay
        max-size: 1G
        verbose: 2

    - name: build k8s-relay
      run: |
        echo "github.workspace = ${{ github.workspace }}"
        docker pull $BENV_IMAGE
        git submodule update  --init --recursive ext/
        # Ensure ccache directory is writable inside container
        mkdir -p "${{ github.workspace }}/.ccache"
        chmod -R 777 "${{ github.workspace }}/.ccache" || true

        docker run -t \
        --rm \
        --mount "type=bind,source=${{ github.workspace }}/.ccache,destination=/ccache" \
        --mount "type=bind,source=/var/run/docker.sock,destination=/var/run/docker.sock" \
        --mount "type=bind,source=$(git rev-parse --show-toplevel),destination=/home/user/src,readonly" \
        --env EBPF_NET_SRC_ROOT=/home/user/src \
        --env CCACHE_DIR=/ccache \
        $BENV_IMAGE \
        ./build.sh k8s-relay

  build-cloud-collector:
    name: build-cloud-collector
    runs-on: ubuntu-24.04
    steps:
    - name: Check out the codebase
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        fetch-depth: 0

    - name: Cache and install ccache
      uses: awalsh128/cache-apt-pkgs-action@latest
      with:
        packages: ccache
        version: 1.0

    - name: Setup ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ccache-build-cloud-collector
        max-size: 1G
        verbose: 2

    - name: build cloud-collector
      run: |
        echo "github.workspace = ${{ github.workspace }}"
        docker pull $BENV_IMAGE
        git submodule update  --init --recursive ext/
        # Ensure ccache directory is writable inside container
        mkdir -p "${{ github.workspace }}/.ccache"
        chmod -R 777 "${{ github.workspace }}/.ccache" || true

        docker run -t \
        --rm \
        --mount "type=bind,source=${{ github.workspace }}/.ccache,destination=/ccache" \
        --mount "type=bind,source=/var/run/docker.sock,destination=/var/run/docker.sock" \
        --mount "type=bind,source=$(git rev-parse --show-toplevel),destination=/home/user/src,readonly" \
        --env EBPF_NET_SRC_ROOT=/home/user/src \
        --env CCACHE_DIR=/ccache \
        $BENV_IMAGE \
        ./build.sh cloud-collector

  build-k8s-watcher:
    name: build-k8s-watcher
    runs-on: ubuntu-24.04
    steps:
    - name: Check out the codebase
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        fetch-depth: 0

    - name: Cache and install ccache
      uses: awalsh128/cache-apt-pkgs-action@latest
      with:
        packages: ccache
        version: 1.0

    - name: Setup ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ccache-build-k8s-watcher
        max-size: 1G
        verbose: 2

    - name: build k8s-watcher
      run: |
        echo "github.workspace = ${{ github.workspace }}"
        docker pull $BENV_IMAGE
        git submodule update  --init --recursive ext/
        # Ensure ccache directory is writable inside container
        mkdir -p "${{ github.workspace }}/.ccache"
        chmod -R 777 "${{ github.workspace }}/.ccache" || true

        docker run -t \
        --rm \
        --mount "type=bind,source=${{ github.workspace }}/.ccache,destination=/ccache" \
        --mount "type=bind,source=/var/run/docker.sock,destination=/var/run/docker.sock" \
        --mount "type=bind,source=$(git rev-parse --show-toplevel),destination=/home/user/src,readonly" \
        --env EBPF_NET_SRC_ROOT=/home/user/src \
        --env CCACHE_DIR=/ccache \
        $BENV_IMAGE \
        ./build.sh k8s-watcher

  build-run-unit-tests:
    name: build-run-unit-tests
    runs-on: ubuntu-24.04
    steps:
    - name: Check out the codebase
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        fetch-depth: 0
    
    - name: Cache and install ccache
      uses: awalsh128/cache-apt-pkgs-action@latest
      with:
        packages: ccache
        version: 1.0

    - name: Setup ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ccache-build-run-unit-tests
        max-size: 1G
        verbose: 2
    - name: run unit tests
      run: |
        echo "github.workspace = ${{ github.workspace }}"
        docker pull $BENV_IMAGE
        git submodule update  --init --recursive ext/
        # Ensure ccache directory is writable inside container
        mkdir -p "${{ github.workspace }}/.ccache"
        chmod -R 777 "${{ github.workspace }}/.ccache" || true

        docker run -t \
        --rm \
        --mount "type=bind,source=${{ github.workspace }}/.ccache,destination=/ccache" \
        --mount "type=bind,source=/var/run/docker.sock,destination=/var/run/docker.sock" \
        --mount "type=bind,source=$(git rev-parse --show-toplevel),destination=/home/user/src,readonly" \
        --env EBPF_NET_SRC_ROOT=/home/user/src \
        --env CCACHE_DIR=/ccache \
        --env ARGS="--output-on-failure --repeat until-pass:3" \
        --env SPDLOG_LEVEL="trace" \
        $BENV_IMAGE \
        ./build.sh unit_tests test

  build-run-unit-tests-with-asan-and-debug-flags:
    name: build-run-unit-tests-with-asan-and-debug-flags
    runs-on: ubuntu-24.04
    steps:
    - name: Check out the codebase
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        fetch-depth: 0

    - name: Cache and install ccache
      uses: awalsh128/cache-apt-pkgs-action@latest
      with:
        packages: ccache
        version: 1.0

    - name: Setup ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ccache-build-run-unit-tests-asan-debug
        max-size: 1G
        verbose: 2
    - name: build unit tests with asan and debug flags on then run all tests
      run: |
        docker pull $BENV_IMAGE
        git submodule update  --init --recursive ext/
        # Ensure ccache directory is writable inside container
        mkdir -p "${{ github.workspace }}/.ccache"
        chmod -R 777 "${{ github.workspace }}/.ccache" || true

        docker run -t \
        --rm \
        --mount "type=bind,source=${{ github.workspace }}/.ccache,destination=/ccache" \
        --mount "type=bind,source=/var/run/docker.sock,destination=/var/run/docker.sock" \
        --mount "type=bind,source=$(git rev-parse --show-toplevel),destination=/home/user/src,readonly" \
        --env EBPF_NET_SRC_ROOT=/home/user/src \
        --env CCACHE_DIR=/ccache \
        --env ARGS="--output-on-failure --repeat until-pass:3" \
        --env SPDLOG_LEVEL="trace" \
        $BENV_IMAGE \
        ./build.sh --debug --asan unit_tests test

  run-kernel-collector-simple-tests:
    name: run-kernel-collector-simple-tests
    needs: [build-kernel-collector]
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        include:
          # renovate: datasource=docker depName=quay.io/lvh-images/complexity-test
          - kernel: '5.4-20250721.013324'
            description: 'Kernel 5.4'
          # renovate: datasource=docker depName=quay.io/lvh-images/complexity-test
          - kernel: '5.10-20250507.063028'
            description: 'Kernel 5.10'
          # renovate: datasource=docker depName=quay.io/lvh-images/complexity-test
          - kernel: '5.15-20250507.063028'
            description: 'Kernel 5.15'
          # renovate: datasource=docker depName=quay.io/lvh-images/complexity-test
          - kernel: '6.1-20250507.063028'
            description: 'Kernel 6.1'
          # renovate: datasource=docker depName=quay.io/lvh-images/complexity-test
          - kernel: '6.6-20250507.063028'
            description: 'Kernel 6.6'
          # renovate: datasource=docker depName=quay.io/lvh-images/complexity-test
          - kernel: '6.12-20250507.063028'
            description: 'Kernel 6.12'
    timeout-minutes: 10
    steps:
    - name: Check out the codebase
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        fetch-depth: 0

    - name: Download kernel-collector container
      uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
      with:
        name: kernel-collector-container
        path: ./container-exports

    - name: Cache and install LVH host dependencies
      uses: awalsh128/cache-apt-pkgs-action@latest
      with:
        # Match LVH action.yaml dependency_list exactly
        packages: cpu-checker qemu-system-x86 libvirt-daemon-system libvirt-clients bridge-utils virtinst virt-manager
        version: lvh-deps-1

    - name: Run kernel collector simple tests on ${{ matrix.description }}
      uses: yonch/little-vm-helper@main
      with:
        test-name: kernel-collector-simple-test-${{ matrix.kernel }}
        image: 'complexity-test'
        image-version: ${{ matrix.kernel }}
        host-mount: ./
        images-folder-parent: "/tmp"
        cpu: 2
        mem: 2G
        cpu-kind: 'host,pmu=on'
        lvh-version: "v0.0.23"
        install-dependencies: 'true'
        verbose: 'true'
        cmd: |
          set -e  # Exit on any error
          cd /host
          
          # Load container images
          docker load < container-exports/kernel-collector.tar
          
          # Start nc listener
          apt-get update && apt-get install -y netcat-openbsd
          
          echo "Starting netcat listener on port 8000..."
          nc -vl 8000 &
          nc_pid=$!
          echo "NC listener started with PID: $nc_pid"
          
          # Wait a moment for nc to start
          sleep 2
          
          # Test: Verify kernel collector loads successfully with libbpf
          echo "=== Kernel Collector Simple Test with libbpf ==="
          
          # Run kernel collector and verify it starts successfully
          container_id=$(docker create \
            --name "test-kernel-collector-libbpf" \
            --env EBPF_NET_INTAKE_PORT="8000" \
            --env EBPF_NET_INTAKE_HOST="127.0.0.1" \
            --env EBPF_NET_HOST_DIR="/hostfs" \
            --privileged --pid host --network host \
            --volume /sys/fs/cgroup:/hostfs/sys/fs/cgroup \
            --volume /etc:/hostfs/etc \
            --volume /var/run/docker.sock:/var/run/docker.sock \
            localhost:5000/kernel-collector --log-console --debug)
          
          echo "Starting kernel collector and running for 30 seconds..."
          docker start $container_id &
          collector_pid=$!
          
          # Wait for 30 seconds
          sleep 30
          
          # Check if container is still running
          echo Checking if container is still running:
          if docker ps --filter "id=$container_id" --filter "status=running" --quiet > /dev/null; then
            echo "✓ Kernel collector loaded successfully and ran for 30 seconds"
            echo "---Kernel collector logs:"
            collector_logs=$(docker logs $container_id 2>&1 || true)
            echo "$collector_logs"
            
            # Fail if a crash was detected in the kernel collector logs
            if echo "$collector_logs" | grep -qi "CRASH DETECTED"; then
              echo "✗ Crash detected in kernel collector output - test failed"
              docker stop $container_id || true
              docker rm $container_id || true
              # Stop nc listener
              kill $nc_pid || true
              exit 1
            fi
            
            # Check for error strings in the logs (exclude GCP metadata fetch errors which are expected)
            if echo "$collector_logs" | grep -i "error" | grep -v "Unable to fetch GCP metadata: error while fetching Google Cloud Platform instance metadata" > /dev/null 2>&1; then
              echo "✗ Found 'error' in kernel collector output - test failed"
              docker stop $container_id || true
              docker rm $container_id || true
              # Stop nc listener
              kill $nc_pid || true
              exit 1
            fi
            
            docker stop $container_id || true
            docker rm $container_id || true
            # Stop nc listener
            kill $nc_pid || true
            exit 0
          else
            echo "✗ Kernel collector failed to run properly"
            echo "---Kernel collector logs:"
            docker logs $container_id || true
            docker rm $container_id || true
            # Stop nc listener
            kill $nc_pid || true
            exit 1
          fi

    - name: Stop qemu
      if: always()
      run: |
        sudo pkill -f qemu-system-x86_64 || true

  run-kernel-collector-tests:
    name: run-kernel-collector-tests
    needs: [build-reducer, build-kernel-collector-test]
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        include:
          # renovate: datasource=docker depName=quay.io/lvh-images/complexity-test
          - kernel: '5.4-20250721.013324'
            description: 'Kernel 5.4'
          # renovate: datasource=docker depName=quay.io/lvh-images/complexity-test
          - kernel: '5.10-20250507.063028'
            description: 'Kernel 5.10'
          # renovate: datasource=docker depName=quay.io/lvh-images/complexity-test
          - kernel: '5.15-20250507.063028'
            description: 'Kernel 5.15'
          # renovate: datasource=docker depName=quay.io/lvh-images/complexity-test
          - kernel: '6.1-20250507.063028'
            description: 'Kernel 6.1'
          # renovate: datasource=docker depName=quay.io/lvh-images/complexity-test
          - kernel: '6.6-20250507.063028'
            description: 'Kernel 6.6'
          # renovate: datasource=docker depName=quay.io/lvh-images/complexity-test
          - kernel: '6.12-20250507.063028'
            description: 'Kernel 6.12'
    timeout-minutes: 10
    steps:
    - name: Check out the codebase
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        fetch-depth: 0

    - name: Download reducer container
      uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
      with:
        name: reducer-container
        path: ./container-exports

    - name: Download kernel-collector-test container
      uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
      with:
        name: kernel-collector-test-container
        path: ./container-exports

    - name: Cache and install LVH host dependencies
      uses: awalsh128/cache-apt-pkgs-action@latest
      with:
        # Match LVH action.yaml dependency_list exactly
        packages: cpu-checker qemu-system-x86 libvirt-daemon-system libvirt-clients bridge-utils virtinst virt-manager
        version: lvh-deps-1

    - name: Run kernel collector tests on ${{ matrix.description }}
      uses: yonch/little-vm-helper@main
      with:
        test-name: kernel-collector-test-${{ matrix.kernel }}
        image: 'complexity-test'
        image-version: ${{ matrix.kernel }}
        host-mount: ./
        images-folder-parent: "/tmp"
        cpu: 2
        mem: 2G
        cpu-kind: 'host,pmu=on'
        lvh-version: "v0.0.23"
        install-dependencies: 'true'
        verbose: 'true'
        cmd: |
          set -e  # Exit on any error
          cd /host
          
          # Load container images
          docker load < container-exports/reducer.tar
          docker load < container-exports/kernel-collector-test.tar
          
          # Create data directory
          mkdir -p data
          
          # Start reducer
          reducer_id=$(docker run --detach --rm \
            --network=host \
            localhost:5000/reducer \
            --port 8000 \
            --prom 0.0.0.0:7000 \
            --partitions-per-shard 1 \
            --num-ingest-shards=1 \
            --num-matching-shards=1 \
            --num-aggregation-shards=1 \
            --enable-aws-enrichment \
            --enable-otlp-grpc-metrics \
            --log-console \
            --debug)
          
          echo "Reducer started with ID: $reducer_id"
          
          # Wait a moment for reducer to start
          sleep 5
          
          # Run kernel collector test and capture real exit code
          echo "Starting kernel collector test..."
          set +e  # disable exit on error to capture exit status
          docker run --name kernel-collector-test-$$ \
            --rm \
            --env EBPF_NET_HOST_DIR="/hostfs" \
            --privileged \
            --network host \
            --volume /sys/fs/cgroup:/hostfs/sys/fs/cgroup \
            --volume /usr/src:/hostfs/usr/src \
            --volume /lib/modules:/hostfs/lib/modules \
            --volume /etc:/hostfs/etc \
            --volume /var/cache:/hostfs/cache \
            --volume /var/run/docker.sock:/var/run/docker.sock \
            --env EBPF_NET_KERNEL_HEADERS_AUTO_FETCH="true" \
            --env EBPF_NET_EXPORT_BPF_SRC_FILE="/hostfs/data/bpf.src.c" \
            --env EBPF_NET_MINIDUMP_DIR="/hostfs/data/minidump" \
            --volume "$(pwd)/data:/hostfs/data" \
            localhost:5000/kernel-collector-test \
            --log-console
          test_exit_code=$?
          set -e  # re-enable exit on error
          
          # Stop reducer
          docker stop $reducer_id || true
          
          echo "Test completed with exit code: $test_exit_code"
          exit $test_exit_code

    - name: Stop qemu
      if: always()
      run: |
        sudo pkill -f qemu-system-x86_64 || true

    - name: Upload kernel-collector dumps
      if: always()
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: kernel-collector-dumps-${{ matrix.kernel }}
        path: |
          data/*.json
        if-no-files-found: warn
