configurations {
  mwe2 {
    extendsFrom implementation
  }
}

dependencies {
  mwe2 "org.eclipse.emf:org.eclipse.emf.mwe2.launch:2.23.0"
  mwe2 "org.eclipse.xtext:org.eclipse.xtext.common.types:${xtextVersion}"
  mwe2 "org.eclipse.xtext:org.eclipse.xtext.xtext.generator:${xtextVersion}"
  mwe2 "org.eclipse.xtext:xtext-antlr-generator:[2.1.1, 3)"
  implementation "org.eclipse.xtext:org.eclipse.xtext:${xtextVersion}"
  implementation "org.eclipse.xtext:org.eclipse.xtext.xbase:${xtextVersion}"
}

task generateXtextLanguage(type: JavaExec) {
  main = 'org.eclipse.emf.mwe2.launch.runtime.Mwe2Launcher'
  classpath = configurations.mwe2
  inputs.file "src/io/opentelemetry/render/GenerateRender.mwe2"
  inputs.file "src/io/opentelemetry/render/Render.xtext"
  outputs.dir "src-gen"
  args += "src/io/opentelemetry/render/GenerateRender.mwe2"
  args += "-p"
  args += "rootPath=/${projectDir}/.."
}

generateXtext.dependsOn(generateXtextLanguage)
clean.dependsOn(cleanGenerateXtextLanguage, cleanGenerateXtext)
eclipse.classpath.plusConfigurations += [configurations.mwe2]
//this is an eclipse plugin project
eclipseClasspath.enabled=false
cleanEclipseClasspath.enabled=false
